#include <stddef.h>
#include <stdbool.h>

#define RMT_LL_MAX_LOOP_COUNT           (1023)/*!< Max loop count that hardware is supported */
#define RMT_LL_HW_BASE  (&RMT)
#define RMT_LL_MEM_BASE (&RMTMEM)

void rmt_ll_enable_drive_clock(rmt_dev_t *dev, bool enable);
void rmt_ll_power_down_mem(rmt_dev_t *dev, bool enable);
bool rmt_ll_is_mem_power_down(rmt_dev_t *dev);
void rmt_ll_enable_mem_access(rmt_dev_t *dev, bool enable);
void rmt_ll_set_group_clock_src(rmt_dev_t *dev, uint32_t channel, uint8_t src, uint8_t div_num, uint8_t div_a, uint8_t div_b);
uint32_t rmt_ll_get_group_clock_src(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_reset_channel_clock_div(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_reset_channels_clock_div(rmt_dev_t *dev, uint32_t channel_mask);
void rmt_ll_rx_reset_channel_clock_div(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_reset_pointer(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_rx_reset_pointer(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_start(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_stop(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_rx_enable(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_tx_set_mem_blocks(rmt_dev_t *dev, uint32_t channel, uint8_t block_num);
void rmt_ll_rx_set_mem_blocks(rmt_dev_t *dev, uint32_t channel, uint8_t block_num);
uint32_t rmt_ll_tx_get_mem_blocks(rmt_dev_t *dev, uint32_t channel);
uint32_t rmt_ll_rx_get_mem_blocks(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_set_channel_clock_div(rmt_dev_t *dev, uint32_t channel, uint32_t div);
void rmt_ll_rx_set_channel_clock_div(rmt_dev_t *dev, uint32_t channel, uint32_t div);
uint32_t rmt_ll_tx_get_channel_clock_div(rmt_dev_t *dev, uint32_t channel);
uint32_t rmt_ll_rx_get_channel_clock_div(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_enable_pingpong(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_rx_set_idle_thres(rmt_dev_t *dev, uint32_t channel, uint32_t thres);
uint32_t rmt_ll_rx_get_idle_thres(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_rx_set_mem_owner(rmt_dev_t *dev, uint32_t channel, uint8_t owner);
uint32_t rmt_ll_rx_get_mem_owner(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_enable_loop(rmt_dev_t *dev, uint32_t channel, bool enable);
bool rmt_ll_is_tx_loop_enabled(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_enable_loop_autostop(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_tx_set_loop_count(rmt_dev_t *dev, uint32_t channel, uint32_t count);
void rmt_ll_tx_reset_loop(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_enable_loop_count(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_tx_enable_sync(rmt_dev_t *dev, bool enable);
void rmt_ll_tx_add_to_sync_group(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_remove_from_sync_group(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_rx_enable_filter(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_rx_set_filter_thres(rmt_dev_t *dev, uint32_t channel, uint32_t thres);
void rmt_ll_tx_enable_idle(rmt_dev_t *dev, uint32_t channel, bool enable);
bool rmt_ll_is_tx_idle_enabled(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_set_idle_level(rmt_dev_t *dev, uint32_t channel, uint8_t level);
uint32_t rmt_ll_tx_get_idle_level(rmt_dev_t *dev, uint32_t channel);
uint32_t rmt_ll_rx_get_channel_status(rmt_dev_t *dev, uint32_t channel);
uint32_t rmt_ll_tx_get_channel_status(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_tx_set_limit(rmt_dev_t *dev, uint32_t channel, uint32_t limit);
void rmt_ll_rx_set_limit(rmt_dev_t *dev, uint32_t channel, uint32_t limit);
uint32_t rmt_ll_rx_get_limit(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_enable_interrupt(rmt_dev_t *dev, uint32_t mask, bool enable);
void rmt_ll_enable_tx_end_interrupt(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_enable_tx_err_interrupt(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_enable_rx_end_interrupt(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_enable_rx_err_interrupt(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_enable_tx_thres_interrupt(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_enable_tx_loop_interrupt(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_enable_rx_thres_interrupt(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_clear_tx_end_interrupt(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_clear_rx_end_interrupt(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_clear_tx_err_interrupt(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_clear_rx_err_interrupt(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_clear_tx_thres_interrupt(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_clear_tx_loop_interrupt(rmt_dev_t *dev, uint32_t channel);
void rmt_ll_clear_rx_thres_interrupt(rmt_dev_t *dev, uint32_t channel);
uint32_t rmt_ll_get_tx_end_interrupt_status(rmt_dev_t *dev);
uint32_t rmt_ll_get_rx_end_interrupt_status(rmt_dev_t *dev);
uint32_t rmt_ll_get_tx_err_interrupt_status(rmt_dev_t *dev);
uint32_t rmt_ll_get_rx_err_interrupt_status(rmt_dev_t *dev);
uint32_t rmt_ll_get_tx_thres_interrupt_status(rmt_dev_t *dev);
uint32_t rmt_ll_get_rx_thres_interrupt_status(rmt_dev_t *dev);
uint32_t rmt_ll_get_tx_loop_interrupt_status(rmt_dev_t *dev);
void rmt_ll_tx_set_carrier_high_low_ticks(rmt_dev_t *dev, uint32_t channel, uint32_t high_ticks, uint32_t low_ticks);
void rmt_ll_rx_set_carrier_high_low_ticks(rmt_dev_t *dev, uint32_t channel, uint32_t high_ticks, uint32_t low_ticks);
void rmt_ll_tx_get_carrier_high_low_ticks(rmt_dev_t *dev, uint32_t channel, uint32_t *high_ticks, uint32_t *low_ticks );
void rmt_ll_rx_get_carrier_high_low_ticks(rmt_dev_t *dev, uint32_t channel, uint32_t *high_ticks, uint32_t *low_ticks);
void rmt_ll_tx_enable_carrier_modulation(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_rx_enable_carrier_demodulation(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_tx_set_carrier_level(rmt_dev_t *dev, uint32_t channel, uint8_t level);
void rmt_ll_rx_set_carrier_level(rmt_dev_t *dev, uint32_t channel, uint8_t level);
void rmt_ll_tx_set_carrier_always_on(rmt_dev_t *dev, uint32_t channel, bool enable);
void rmt_ll_write_memory(rmt_mem_t *mem, uint32_t channel, const void *data, size_t length_in_words, size_t off);
void rmt_ll_rx_enable_pingpong(rmt_dev_t *dev, uint32_t channel, bool enable);
